package es.usal.seriesg.generated.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import es.usal.seriesg.generated.entities.Episode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EPISODE.
*/
public class EpisodeDao extends AbstractDao<Episode, Long> {

    public static final String TABLENAME = "EPISODE";

    /**
     * Properties of entity Episode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TmdbId = new Property(0, Long.class, "tmdbId", true, "TMDB_ID");
        public final static Property SeasonId = new Property(1, Long.class, "seasonId", false, "SEASON_ID");
    };


    public EpisodeDao(DaoConfig config) {
        super(config);
    }
    
    public EpisodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EPISODE' (" + //
                "'TMDB_ID' INTEGER PRIMARY KEY ," + // 0: tmdbId
                "'SEASON_ID' INTEGER);"); // 1: seasonId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EPISODE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Episode entity) {
        stmt.clearBindings();
 
        Long tmdbId = entity.getTmdbId();
        if (tmdbId != null) {
            stmt.bindLong(1, tmdbId);
        }
 
        Long seasonId = entity.getSeasonId();
        if (seasonId != null) {
            stmt.bindLong(2, seasonId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Episode readEntity(Cursor cursor, int offset) {
        Episode entity = new Episode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // tmdbId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // seasonId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Episode entity, int offset) {
        entity.setTmdbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSeasonId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Episode entity, long rowId) {
        entity.setTmdbId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Episode entity) {
        if(entity != null) {
            return entity.getTmdbId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
