package es.usal.seriesg.generated.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import es.usal.seriesg.generated.entities.Movie;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MOVIE.
*/
public class MovieDao extends AbstractDao<Movie, Long> {

    public static final String TABLENAME = "MOVIE";

    /**
     * Properties of entity Movie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TmdbId = new Property(0, Long.class, "tmdbId", true, "TMDB_ID");
        public final static Property Seen = new Property(1, boolean.class, "seen", false, "SEEN");
        public final static Property PosterPath = new Property(2, String.class, "posterPath", false, "POSTER_PATH");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property ReleaseDate = new Property(5, java.util.Date.class, "releaseDate", false, "RELEASE_DATE");
        public final static Property ProductionCompanies = new Property(6, String.class, "productionCompanies", false, "PRODUCTION_COMPANIES");
        public final static Property Runtime = new Property(7, int.class, "runtime", false, "RUNTIME");
    };


    public MovieDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MOVIE' (" + //
                "'TMDB_ID' INTEGER PRIMARY KEY ," + // 0: tmdbId
                "'SEEN' INTEGER NOT NULL ," + // 1: seen
                "'POSTER_PATH' TEXT," + // 2: posterPath
                "'TITLE' TEXT NOT NULL ," + // 3: title
                "'STATUS' TEXT NOT NULL ," + // 4: status
                "'RELEASE_DATE' INTEGER NOT NULL ," + // 5: releaseDate
                "'PRODUCTION_COMPANIES' TEXT NOT NULL ," + // 6: productionCompanies
                "'RUNTIME' INTEGER NOT NULL );"); // 7: runtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MOVIE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Movie entity) {
        stmt.clearBindings();
 
        Long tmdbId = entity.getTmdbId();
        if (tmdbId != null) {
            stmt.bindLong(1, tmdbId);
        }
        stmt.bindLong(2, entity.getSeen() ? 1l: 0l);
 
        String posterPath = entity.getPosterPath();
        if (posterPath != null) {
            stmt.bindString(3, posterPath);
        }
        stmt.bindString(4, entity.getTitle());
        stmt.bindString(5, entity.getStatus());
        stmt.bindLong(6, entity.getReleaseDate().getTime());
        stmt.bindString(7, entity.getProductionCompanies());
        stmt.bindLong(8, entity.getRuntime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Movie readEntity(Cursor cursor, int offset) {
        Movie entity = new Movie( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // tmdbId
            cursor.getShort(offset + 1) != 0, // seen
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // posterPath
            cursor.getString(offset + 3), // title
            cursor.getString(offset + 4), // status
            new java.util.Date(cursor.getLong(offset + 5)), // releaseDate
            cursor.getString(offset + 6), // productionCompanies
            cursor.getInt(offset + 7) // runtime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Movie entity, int offset) {
        entity.setTmdbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSeen(cursor.getShort(offset + 1) != 0);
        entity.setPosterPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.getString(offset + 3));
        entity.setStatus(cursor.getString(offset + 4));
        entity.setReleaseDate(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setProductionCompanies(cursor.getString(offset + 6));
        entity.setRuntime(cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Movie entity, long rowId) {
        entity.setTmdbId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Movie entity) {
        if(entity != null) {
            return entity.getTmdbId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
